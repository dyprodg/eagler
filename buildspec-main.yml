version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - npm install

  pre_build:
    commands:
      - BUILD_STATUS=""

      # Code Formatting, Linting, and Testing
      - npx prettier --write .
      - npx eslint --fix .
      - npm test
      
      # Stop Container if it is still running from a previous build
      - docker stop $(docker ps --filter "publish=80" -q) || true

  build:
    commands:
      # Get .envs for Docker container
      - |
        SECRETS=$(aws secretsmanager get-secret-value --secret-id ${SECRET_ARN} --query SecretString --output text)
        DATABASE_URL=$(echo $SECRETS | jq -r .DATABASE_URL)
        NEXTAUTH_SECRET=$(echo $SECRETS | jq -r .NEXTAUTH_SECRET)
        AWS_ACCESS_KEY=$(echo $SECRETS | jq -r .AWS_ACCESS_KEY)
        AWS_SECRET_ACCESS_KEY=$(echo $SECRETS | jq -r .AWS_SECRET_ACCESS_KEY)
        AWS_BUCKET_NAME=$(echo $SECRETS | jq -r .AWS_BUCKET_NAME)
        AWS_BUCKET_REGION=$(echo $SECRETS | jq -r .AWS_BUCKET_REGION)
        AWS_STORAGE_BUCKET_NAME=$(echo $SECRETS | jq -r .AWS_STORAGE_BUCKET_NAME)
        DOCKER_PWD=$(echo $SECRETS | jq -r .DOCKER_PWD)
        IMAGE_UPLOAD_URL="http://${AWS_BUCKET_NAME}.s3.${AWS_BUCKET_REGION}.amazonaws.com/"
        IMAGE_STORAGE_URL="http://${AWS_STORAGE_BUCKET_NAME}.s3.${AWS_BUCKET_REGION}.amazonaws.com/"

      # Log in to Docker
      - echo "$DOCKER_PWD" | docker login --username dyprod --password-stdin

      # Build Docker Image
      - docker build --no-cache --force-rm -t myapp .

      # Start Docker Container from Image
      - >
        docker run \
          -e DATABASE_URL="$DATABASE_URL" \
          -e NEXTAUTH_SECRET="$NEXTAUTH_SECRET" \
          -e AWS_ACCESS_KEY="$AWS_ACCESS_KEY" \
          -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
          -e AWS_BUCKET_NAME="$AWS_BUCKET_NAME" \
          -e AWS_BUCKET_REGION="$AWS_BUCKET_REGION" \
          -e AWS_STORAGE_BUCKET_NAME="$AWS_STORAGE_BUCKET_NAME" \
          -e IMAGE_UPLOAD_URL="$IMAGE_UPLOAD_URL" \
          -e IMAGE_STORAGE_URL="$IMAGE_STORAGE_URL" \
          -p 80:3000 \
          -d \
          myapp
      
      # Get Docker ID for health check
      - CONTAINER_ID=$(docker ps -l -q)
      - sleep 10
      
      # Run Healthcheck
      - docker inspect myapp | grep IPAddress | awk '{print $2}' | tr -d '",' | xargs -I {} curl http://{}:80 || exit 1
      - echo "Health check passed"
      - echo "Build and analysis completed"

      # Push Docker image to ECR
      - |
        ECR_REPOSITORY_NAME="eagler-docker"
        IMAGE_TAG="latest"
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        ECR_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_BUCKET_REGION.amazonaws.com/$ECR_REPOSITORY_NAME"

        aws ecr get-login-password --region $AWS_BUCKET_REGION | docker login --username AWS --password-stdin $ECR_URI
        docker tag myapp:latest $ECR_URI:$IMAGE_TAG
        docker push $ECR_URI:$IMAGE_TAG
        echo "Image pushed to ECR"
        BUILD_STATUS="success"

  post_build:
    commands:
      # Notify build status
      - aws sns publish --topic-arn arn:aws:sns:eu-central-1:283919506801:eagler-pipepline --message "$(if [ "$BUILD_STATUS" = "success" ]; then echo 'Release Successful'; else echo 'Release Failed'; fi)"

artifacts:
  files:
    - 'scripts/*'
    - 'appspec.yml'
