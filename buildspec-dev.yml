version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - npm install

  pre_build:
    commands:
      - npm test
      - npx prettier --write .
      - npx eslint --fix .

  build:
    commands:
      - |
        SECRETS=$(aws secretsmanager get-secret-value --secret-id ${SECRET_ARN} --query SecretString --output text)
        DATABASE_URL=$(echo $SECRETS | jq -r .DATABASE_URL)
        NEXTAUTH_SECRET=$(echo $SECRETS | jq -r .NEXTAUTH_SECRET)
        AWS_ACCESS_KEY=$(echo $SECRETS | jq -r .AWS_ACCESS_KEY)
        AWS_SECRET_ACCESS_KEY=$(echo $SECRETS | jq -r .AWS_SECRET_ACCESS_KEY)
        AWS_BUCKET_NAME=$(echo $SECRETS | jq -r .AWS_BUCKET_NAME)
        AWS_BUCKET_REGION=$(echo $SECRETS | jq -r .AWS_BUCKET_REGION)
        AWS_STORAGE_BUCKET_NAME=$(echo $SECRETS | jq -r .AWS_STORAGE_BUCKET_NAME)
        SONAR_TOKEN=$(echo $SECRETS | jq -r .SONAR_TOKEN)
        IMAGE_UPLOAD_URL="http://${AWS_BUCKET_NAME}.s3.${AWS_BUCKET_REGION}.amazonaws.com/"
        IMAGE_STORAGE_URL="http://${AWS_STORAGE_BUCKET_NAME}.s3.${AWS_BUCKET_REGION}.amazonaws.com/"
      - >
        docker run \
          -e SONAR_HOST_URL="http://3.67.65.204:9000" \
          -e SONAR_LOGIN="$SONAR_TOKEN" \
          -v $(pwd):/src \
          sonarsource/sonar-scanner-cli
      - docker build -t myapp .
      - >
        docker run \
          -e DATABASE_URL="$DATABASE_URL" \
          -e NEXTAUTH_SECRET="$NEXTAUTH_SECRET" \
          -e AWS_ACCESS_KEY="$AWS_ACCESS_KEY" \
          -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
          -e AWS_BUCKET_NAME="$AWS_BUCKET_NAME" \
          -e AWS_BUCKET_REGION="$AWS_BUCKET_REGION" \
          -e AWS_STORAGE_BUCKET_NAME="$AWS_STORAGE_BUCKET_NAME" \
          -e IMAGE_UPLOAD_URL="$IMAGE_UPLOAD_URL" \
          -e IMAGE_STORAGE_URL="$IMAGE_STORAGE_URL" \
          -p 80:3000 \
          --log-driver=awslogs \
          --log-opt awslogs-region=eu-central-1 \
          --log-opt awslogs-group=eagler/ec2 \
          --log-opt awslogs-stream={instance_id} \
          -d \
          myapp

  post_build:
    commands:
      - echo "Build and analysis completed"
      # Warten, bis der Docker-Container hochgefahren ist
      - sleep 10
      # Gesundheitscheck durchf√ºhren
      - curl -f http://localhost:80/ || exit 1
      - echo "Health check passed"
      - docker stop myapp
      - docker stop sonarqube
      - docker rm myapp
      - docker rm sonarqube
      - echo "Docker container stopped and removed!"

artifacts:
  files:
    - "**/*"
